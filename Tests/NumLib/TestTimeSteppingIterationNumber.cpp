/**
 * \author Norihiro Watanabe
 * \date   2012-08-03
 *
 * \copyright
 * Copyright (c) 2012-2019, OpenGeoSys Community (http://www.opengeosys.org)
 *            Distributed under a Modified BSD License.
 *              See accompanying file LICENSE.txt or
 *              http://www.opengeosys.org/project/license
 */

#include <gtest/gtest.h>

#include <utility>
#include <vector>

#include <logog/include/logog.hpp>

#include "NumLib/TimeStepping/TimeStep.h"
#include "NumLib/TimeStepping/Algorithms/IterationNumberBasedTimeStepping.h"

#include "Tests/TestTools.h"
#include "TimeSteppingTestingTools.h"

TEST(NumLib, TimeSteppingIterationNumberBased1)
{
    std::vector<int> iter_times_vector = {0, 3, 5, 7};
    std::vector<double> multiplier_vector = {2.0, 1.0, 0.5, 0.25};
    NumLib::IterationNumberBasedTimeStepping alg(1, 31, 1, 10, 1,
                                                 std::move(iter_times_vector),
                                                 std::move(multiplier_vector));

    const double solution_error = 0.;

    ASSERT_TRUE(alg.next(solution_error, 1));
    NumLib::TimeStep ts = alg.getTimeStep();
    ASSERT_EQ(1u, ts.steps());
    ASSERT_EQ(1., ts.previous());
    ASSERT_EQ(2., ts.current());
    ASSERT_EQ(1., ts.dt());
    ASSERT_TRUE(alg.accepted());

    ASSERT_TRUE(alg.next(solution_error, 1));

    ASSERT_TRUE(alg.next(solution_error, 3));
    ts = alg.getTimeStep();
    ASSERT_EQ(3u, ts.steps());
    ASSERT_EQ(4., ts.previous());
    ASSERT_EQ(6., ts.current());
    ASSERT_EQ(2., ts.dt());
    ASSERT_TRUE(alg.accepted());

    ASSERT_TRUE(alg.next(solution_error, 5));
    ts = alg.getTimeStep();
    ASSERT_EQ(4u, ts.steps());
    ASSERT_EQ(6., ts.previous());
    ASSERT_EQ(7., ts.current());
    ASSERT_EQ(1., ts.dt());
    ASSERT_TRUE(alg.accepted());

    ASSERT_TRUE(alg.next(solution_error, 7));
    ts = alg.getTimeStep();
    ASSERT_EQ(5u, ts.steps());
    ASSERT_EQ(7., ts.previous());
    ASSERT_EQ(8., ts.current());
    ASSERT_EQ(1., ts.dt());
    ASSERT_TRUE(alg.accepted());

    ASSERT_TRUE(alg.next(solution_error, 8 /* exceed maximum */));
    ts = alg.getTimeStep();
    ASSERT_EQ(5u, ts.steps());
    ASSERT_EQ(7., ts.previous());
    ASSERT_EQ(8, ts.current());
    ASSERT_EQ(1., ts.dt());
    ASSERT_FALSE(alg.accepted());

    ASSERT_TRUE(alg.next(solution_error, 4));
    ts = alg.getTimeStep();
    ASSERT_EQ(6u, ts.steps());
    ASSERT_EQ(8., ts.previous());
    ASSERT_EQ(9, ts.current());
    ASSERT_EQ(1., ts.dt());
    ASSERT_TRUE(alg.accepted());
}

TEST(NumLib, TimeSteppingIterationNumberBased2)
{
    std::vector<int> iter_times_vector = {0, 3, 5, 7};
    std::vector<double> multiplier_vector = {2.0, 1.0, 0.5, 0.25};
    NumLib::IterationNumberBasedTimeStepping alg(1, 31, 1, 10, 1,
                                                 std::move(iter_times_vector),
                                                 std::move(multiplier_vector));

    std::vector<int> nr_iterations = {0, 2, 2, 2, 4, 6, 8, 4, 4, 2, 2};
    const std::vector<double> expected_vec_t = {1,  2,  4,  8,  16,
                                                24, 28, 28, 30, 31};

    std::vector<double> vec_t = timeStepping(alg, nr_iterations);

    ASSERT_EQ(expected_vec_t.size(), vec_t.size());
    ASSERT_EQ(1u, alg.getNumberOfRepeatedSteps());
    ASSERT_ARRAY_NEAR(expected_vec_t, vec_t, expected_vec_t.size(), std::numeric_limits<double>::epsilon());
}


TEST(NumLib, TimeSteppingIterationNumberBased_1_m13)
{
    std::vector<int> iter_times_vector = {3, 4, 5, 6, 8, 10};
    std::vector<double> multiplier_vector = {1.25, 1.2, 1.1, 0.9, 0.5, 0.1};
    NumLib::IterationNumberBasedTimeStepping alg(0.0, 50e6, 0.01, 1e6, .1,
                                                 std::move(iter_times_vector),
                                                 std::move(multiplier_vector));

    std::vector<int> nr_iterations = {0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 5, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
    const std::vector<double> expected_vec_t = {0, 0.1000000000000000055511151231, 0.2250000000000000124900090270, 0.3812500000000000211636264069, 0.5765625000000000320056481318, 0.8207031250000000455581752879, 1.125878906250000062498834233, 1.507348632812500083674657914, 1.984185791015625110144437516, 2.580232238769531393231662018, 3.325290298461914247090692646, 4.256612873077392814414480931, 5.420766091346741023569216287, 6.875957614183426285012635482, 8.694947017729282861816909476, 10.96868377216160358282225197, 13.81085471520200448407893008, 17.36356839400250561064977772, 21.62682480856310680476261385, 26.74273250603582804837139995, 32.88182174300309331351000257, 40.24872882736381135904599687, 49.08901732859667268653279541, 59.69736353007610588692928013, 72.42737897185142525629985355, 87.70339750198180793421829176, 106.0346197381382664693289177, 128.0320864215260158973918690, 154.4290464415913142341836508, 183.4657024636631447491756343, 215.4060240879421608946399421, 250.5403778746490814915211191, 289.1881670400266972686478962, 331.7007351219420780561005816, 378.4645600120490006981730892, 429.9047673911666197579148565, 486.4889955081960052924390105, 548.7316464369283344061046108, 617.1985624585339019593947051, 678.8187868779789142776267218, 734.2769888554794267322793755, 784.1893706352298891728862186, 839.0929905929554022906637833, 888.5062485549083653157688518, 932.9781807206660331355581476, 981.8973061029994716872274162, 1025.924518947099567469952545, 1065.549010506789654652005669, 1109.135951222448754071625935, 1148.364197866541944517108677, 1183.669619846225816789085198, 1222.505584023878079424010761, 1265.225144619295571771755409, 1312.216661274254817148533704, 1354.509026263718139031055445, 1401.030627752127796858145950, 1442.900069091696489935514467, 1480.582566297308314634834488, 1514.496813782358957700942028, 1551.802486015914668085850595, 1585.377591026114808260620631, 1622.310206537334965434936041, 1662.936083599677141606958200, 1699.499372955785101063853826, 1739.718991247503859713911470, 1775.916647710050743392018275, 1815.734069818852318652933492, 1851.569749716773737271881563, 1890.988997604487300935572196, 1926.466320703429509108176898, 1965.491376112265941249061346, 2008.418937061986020070155443, 2047.053741916734091962323462, 2089.552027256956974475168275, 2136.300141131202149013903560, 2178.373443618022807136781964, 2216.239415856161400381587511, 2250.318790870486135142705988, 2280.990228383378397184426753, 2308.594522144981433703018164, 2338.959245282744776325222517, 2366.287496106731785359438730, 2396.348572013117497724312828, 2423.403540328864639520189488, 2453.164005476186497898617715, 2479.948424108776171100018192, 2509.411284604624814000492978, 2535.927859050888593265127207, 2565.096090941778752811369777, 2597.181146021757930902896015, 2632.474706609735029653300229, 2671.297623256509841413442751, 2714.002831567962137797767201, 2760.978560710559667613508539, 2812.651862767416954583106898, 2869.492495029959974839176269, 2920.649064066248694331754276, 2976.921290006166290317206148, 3038.820738540075650899180879, 3094.530242220594076797401996, 3155.810696269164350233443119, 3210.963104912877597686579550, 3271.630754420962174783547540, 3338.365168879855214978582035, 3411.773024784637565120326657, 3477.840095098941681877878653, 3537.300458381815388426659102, 3602.706857992976470911458746, 3674.653897565253667453993619, 3739.406233180303145939820202, 3810.633802356857578025392155, 3874.738614615756568483976659, 3932.432945648765661320115484, 3995.896709785075668564154167, 4065.706850335016682169311292, 4128.535976829963595964049213, 4185.082190675415819774400199, 4247.283025905413270988098969, 4303.263777612410978461563850, 4364.842604490108461654464778, 4420.263548680036197895400242, 4481.226587288956712682797915, 4536.093322036985177345107203, 4596.446730259816493346792396, 4650.764797660364679088423938, 4710.514671800967688228632161, 4776.239533355631003589716085, 4835.391908754827988874076708, 4900.459521693944677940659724, 4972.033895926973041693066005, 5036.450832736698570659502023, 5107.309463227396658243954957, 5185.253956767164560880363829, 5255.404000952955674983847241, 5332.569049557325906728254533, 5417.450603022133168500735647, 5493.844001140459705980717750, 5577.876739070618903993794825, 5670.312750793794029271786045, 5753.505161344651644074469914, 5828.378330840423499244127989, 5910.738817285772546580825208, 5984.863255086586691012622872, 6066.400136667482256471172905, 6139.783330090288267194350401, 6220.504842855374885507582523, 6293.154204343952843781869074, 6373.068501981388604336143788, 6444.991369855080790609444895, 6524.106524516142201898110026, 6611.133194643309761342478974, 6689.457197757760566774791286, 6775.613601183656459706903760, 6853.154364266962765258861443, 6938.449203658599708253018136, 7015.214559111072958841685051, 7099.656450108793541307351867, 7175.654152006742067401438634, 7259.251624094485452854885955, 7334.489348973454501619225310, 7417.250846340320461942450959, 7508.288493443873025648696767, 7608.429905257780853811334510, 7718.585458253079473684580116, 7839.756566547907965328928781, 7948.810564013253610499381666, 8068.769961225133829872820553, 8176.733418715826029972549247, 8295.493221955587459671332117, 8426.129005519325042887982710, 8543.701210726688870683665339, 8673.030636454789091701425773, 8789.427119610079293489100288, 8917.463251080898525793626701, 9058.302995698799692700498646, 9185.058765854910746043953942, 9299.138958995410696867607199, 9401.811132821860655141984272, 9514.750524030955618362919962, 9616.395976119141087769520333, 9728.205973416145113144710442, 9851.196970442849550988142232, 9961.888867766883547778179578, 10061.51157535851414734706705, 10171.09655370930781572111717, 10269.72303422502211969103760, 10358.48686668916499545391378, 10456.12708239972216667688962, 10544.00327653922362294561619, 10640.66709009267523264618934, 10727.66452229078168352307300, 10823.36169770869878721456921, 10909.48915558482418266181995, 11004.22935924856212530345071, 11089.49554254592627578457350, 11183.28834417302684888696697, 11267.70186563741736676173965, 11360.55673924824694392141640, 11444.12612549799356542691785, 11536.05245037271485650542199, 11618.78614275996402051725016, 11709.79320438593810827848917, 11791.69955984931478928436698, 11865.41527976635380400834344, 11946.50257167509672675198871, 12035.69859277471394897199679, 12133.81421598429290133620378, 12222.11827687291396064259455, 12319.25274385039713372260052, 12406.67376413013199165142433, 12485.35268238189336572850235, 12571.89949245883088420137990, 12675.75566455115590252538251, 12800.38307106194591990204510, 12949.93595887489393521947156, 13129.39942425043154695890094, 13344.75558270107667307643734, 13603.18297284185081485374640, 13913.29584101077977351003572, 14285.43128281349451012580504, 14731.99381297675217753859480, 15267.86884917266135860258239, 15910.91889260775235208173536, 16682.57894472986151569956036, 17608.57100727639247777236007, 18627.16227607757661829705643, 19849.47179863899754169215289, 21316.24322571270259548482164, 23076.36893820114859489828773, 25188.51979318728371602916335, 27723.10081917064576758787366, 30764.59805035068011690031752, 34414.39472776672120100563994, 38794.15074066597033984849459, 44049.85795614506911195968146, 50356.70661471998740509281924, 57924.92500500988907677224084, 67006.78707335777074669113427, 77905.02155537522834727811139, 89893.07948559443267588145420, 103079.9432088355585020985661, 117585.4933044007980821661674, 133541.5984095225629085921849, 151093.3140251565056348476258, 170400.2012023538441926341147, 191637.7770972709183209953067, 214999.1105816797017484682776, 240696.5774145293655935917712, 268963.7909306639981056211623, 300057.7257984120963794863956, 334261.0541529350072424343455, 371884.7153429102122295429030, 413270.7426518829410570147102, 458795.3726917529464430513314, 508872.4657356099564110910113, 563957.2680838526718236739955, 624550.5506669196636700285481, 691203.1615082933600827831528, 764521.0334338044320567542746, 845170.6925518666177400576708, 933885.3175817350291548200851, 1031471.405114590289590500287, 1138816.101400731084737134210, 1256895.267315485968932555797, 1386782.349821716352035056240, 1529658.140578569784984097096, 1658246.352259737877810713717, 1799693.385109022791340919465, 1955285.121243236208787165998, 2126436.030990870981797359416, 2314702.031713269247309826631, 2521794.632507907356094920468, 2749596.493382009294152041580, 2954618.168168701043461668000, 3139137.675476723622392727456, 3342109.133515548475605517298, 3524783.445750490848003899877, 3689190.326761938987218628747, 3870037.895874531954957094881, 4032800.708075865629937337105, 4211839.801497332686871845284, 4372974.985576653042088369122, 4550223.688063905447138224659, 4709747.520302432615618806454, 4885223.735764812515116008950, 5043152.329680954428559845890, 5216873.782988710547374943422, 5407967.381627242293501115293, 5579951.620401920869257800238, 5769134.283054067317865422619, 5939398.679440999125812981720, 6126689.515466624129677812983, 6295251.267889686637314853089, 6480669.195555055410686888294, 6684628.915986961077864547218, 6868192.664375676182853255804, 7070112.787603262814644571244, 7251840.898508090787740282539, 7451741.820503401574286263599, 7631652.650299181286616338678, 7829554.563074538986158712914, 8047246.667127432473232545388, 8243169.560775036616432730339, 8458684.743787401191354382391, 8652648.408498529313569267605, 8866008.439680770265233075460, 9100704.473981235331013441633, 9311930.904851653895427070010, 9544279.978809114335042736982, 9753394.145370828735856023090, 9983419.728588714595323706808, 10236447.87012838906116853480, 10464173.19751409608604723336, 10714671.05763837383363987392, 10990218.70377507937824045789, 11238211.58529811437449937029, 11511003.75497345289241036649, 11756516.70768125756458746602, 12026580.95565984272578820614, 12323651.62843628642709554397, 12591015.23393508576486844203, 12885115.19998376506016528836, 13208625.16263731231111314363, 13499784.12902550484414957756, 13820058.99205251665634976595, 14172361.34138222967821609535, 14489433.45577897140571847540, 14838212.78161538733413275441, 15152114.17486816167745006228, 15497405.70744621348297914528, 15877226.39328207049972918535, 16219065.01053434182323793483, 16595087.48951184030945892754, 17008712.21638708867769952464, 17380974.47057481221830037593, 17790462.95018130814602484242, 18240900.27774845370289163863, 18736381.33807231385545198583, 19182314.29236378800375818794, 19672840.54208440960650181293, 20212419.41677709341308728335, 20698040.40400050885099526453, 21232223.48994626587582585193, 21819824.88448659865058448698, 22348666.13957289816091463047, 22930391.52016782766924832733, 23570289.43882225018008298680, 24274177.14934211499883546444, 24907676.08880999335134214117, 25604524.92222465959536549427, 26371058.63898079252568379224, 27214245.72741253881711579053, 27973114.10700111049812710339, 28807869.32454853941464059935, 29726100.06385071129694660190, 30726100.06385071129694660190, 31726100.06385071129694660190, 32726100.06385071129694660190, 33726100.06385071129694660190, 34726100.06385071129694660190, 35726100.06385071129694660190, 36726100.06385071129694660190, 37726100.06385071129694660190, 38726100.06385071129694660190, 39726100.06385071129694660190, 40726100.06385071129694660190, 41726100.06385071129694660190, 42726100.06385071129694660190, 43726100.06385071129694660190, 44726100.06385071129694660190, 45726100.06385071129694660190, 46726100.06385071129694660190, 47726100.06385071129694660190, 48726100.06385071129694660190, 49726100.06385071129694660190, 5e7};

    std::vector<double> vec_t = timeStepping(alg, nr_iterations);

    ASSERT_EQ(expected_vec_t.size(), vec_t.size());
    ASSERT_EQ(0u, alg.getNumberOfRepeatedSteps());
    ASSERT_ARRAY_NEAR(expected_vec_t, vec_t, expected_vec_t.size(), 2e-6);
}



TEST(NumLib, TimeSteppingIterationNumberBased_1_m5)
{
    std::vector<int> iter_times_vector = {3, 4, 5, 6, 8, 10};
    std::vector<double> multiplier_vector = {1.25, 1.2, 1.1, 0.9, 0.5, 0.1};
    NumLib::IterationNumberBasedTimeStepping alg(0.0, 50e6, 0.01, 1e6, .1,
                                                 std::move(iter_times_vector),
                                                 std::move(multiplier_vector));

    std::vector<int> nr_iterations = {};
    const std::vector<double> expected_vec_t = {0, 0.1000000000000000055511151231, 0.2250000000000000124900090270, 0.3812500000000000211636264069, 0.5765625000000000320056481318, 0.8207031250000000455581752879, 1.125878906250000062498834233, 1.507348632812500083674657914, 1.984185791015625110144437516, 2.580232238769531393231662018, 3.325290298461914247090692646, 4.256612873077392814414480931, 5.420766091346741023569216287, 6.875957614183426285012635482, 8.694947017729282861816909476, 10.96868377216160358282225197, 13.81085471520200448407893008, 17.36356839400250561064977772, 21.80446049250313201886333728, 27.35557561562891502913028672, 34.29446951953614379196397352, 42.96808689942017974550608203, 53.81010862427522468743371766, 67.36263578034403086484326220, 84.30329472543003858660519288, 105.4791184067875482388076062, 131.9488980084844353040606229, 165.0361225106055441356268938, 206.3951531382569301750847324, 258.0939414228211627244070306, 322.7174267785264534110599034, 403.4967834731580667693759944, 504.4709793414475834672711081, 630.6887241768094793396400002, 788.4609052210118491801011153, 985.6761315262648114806775092, 1232.195164407831014356398002, 1540.343955509788767951048618, 1925.529944387235959944361887, 2407.012430484044949936003474, 3008.865538105056187425555458, 3761.181922631320234287495437, 4701.577403289150292864920411, 5877.071754111437866086701629, 7346.439692639297332613928151, 9183.149615799121665772961303, 11479.03701974890208222175274, 14348.89627468612760278274204, 17936.22034335765950348397866, 22420.37542919707437936052444, 28025.56928649634297420620667, 35032.06160812042871776330945, 43790.17701015053589720968793, 54737.82126268816987151766103, 68422.37657836021233940262741, 85528.07072295026542425883539, 106910.1884036878317803290954, 133637.8355046097897254169204, 167047.3943807622371567767016, 208809.3429759527964459764281, 261011.7787199409955574760862, 326264.8233999262444468506589, 407831.1292499078055585688748, 509789.0115623847569482166446, 637236.3644529809461852763568, 796545.5555662261827316009970, 995682.0444577827284145067972, 1244602.655572228410518139047, 1555753.419465285513147679360, 1944691.874331606891434604751, 2430864.942914508614293261490, 3038581.278643135767866582414, 3798226.698303919709833233568, 4747783.472879899637291547511, 5747783.472879899637291547511, 6747783.472879899637291547511, 7747783.472879899637291547511, 8747783.472879899637291547511, 9747783.472879899637291547511, 10747783.47287989963729154751, 11747783.47287989963729154751, 12747783.47287989963729154751, 13747783.47287989963729154751, 14747783.47287989963729154751, 15747783.47287989963729154751, 16747783.47287989963729154751, 17747783.47287989963729154751, 18747783.47287989963729154751, 19747783.47287989963729154751, 20747783.47287989963729154751, 21747783.47287989963729154751, 22747783.47287989963729154751, 23747783.47287989963729154751, 24747783.47287989963729154751, 25747783.47287989963729154751, 26747783.47287989963729154751, 27747783.47287989963729154751, 28747783.47287989963729154751, 29747783.47287989963729154751, 30747783.47287989963729154751, 31747783.47287989963729154751, 32747783.47287989963729154751, 33747783.47287989963729154751, 34747783.47287989963729154751, 35747783.47287989963729154751, 36747783.47287989963729154751, 37747783.47287989963729154751, 38747783.47287989963729154751, 39747783.47287989963729154751, 40747783.47287989963729154751, 41747783.47287989963729154751, 42747783.47287989963729154751, 43747783.47287989963729154751, 44747783.47287989963729154751, 45747783.47287989963729154751, 46747783.47287989963729154751, 47747783.47287989963729154751, 48747783.47287989963729154751, 49747783.47287989963729154751, 5e7};
    std::vector<double> vec_t = timeStepping(alg, nr_iterations);

    ASSERT_EQ(expected_vec_t.size(), vec_t.size());
    ASSERT_EQ(0u, alg.getNumberOfRepeatedSteps());
    ASSERT_ARRAY_NEAR(expected_vec_t, vec_t, expected_vec_t.size(), 2e-6);
}